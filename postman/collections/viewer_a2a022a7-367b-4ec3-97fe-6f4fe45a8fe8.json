{
	"info": {
		"_postman_id": "b74f2732-a0c8-43f6-8ad8-b3bbc8bdca19",
		"name": "viewer",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "createUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "49fcf412-9d7b-4d17-b5de-966d99724102",
						"exec": [
							"let status = pm.response.code",
							"if (status == 200) {",
							"    jsonData = pm.response.json();",
							"     if (pm.expect(pm.response.text()).not.include(\"errors\")) {",
							"        console.log(\"No errors found\")",
							"        let viewer_uuid = jsonData['data']['insertUser']['id'];",
							"        pm.globals.set(\"viewer_uuid\", viewer_uuid);",
							"        console.log(\"Created user account at : \", viewer_uuid)",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3e1e0be0-bb09-4977-bee5-75403b0c9ca2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-hasura-admin-secret",
						"value": "ZB3R136ifw7y11yBUX3wZax5l1cjcWrrQciulNwRAWZG5iHtMwLjvGiDK0XSOw5d",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation InsertUser ($id : uuid){\n  insertUser(object: {locale: \"en\", displayName: \"Temporary Test user\", phoneNumber: \"+150055500077\", defaultRole: \"viewer\", demoAccount: true, id: $id}) {\n    id\n  }\n}\n",
						"variables": "{\n    \"id\" : \"{{$guid}}\"\n}"
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAccount",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d28cdb8c-55e3-430f-be64-543a7459bc05",
						"exec": [
							"let status = pm.response.code",
							"if (status == 200) {",
							"    jsonData = pm.response.json();",
							"     if (pm.expect(pm.response.text()).not.include(\"errors\")) {",
							"        console.log(\"No errors found\")",
							"        let account_id = jsonData['data']['accounts'][0]['id'];",
							"        pm.globals.set(\"account_id\", account_id);",
							"        console.log(account_id)",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e341c0f0-ad31-4310-a3ec-49c5f69a5853",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-hasura-admin-secret",
						"value": "ZB3R136ifw7y11yBUX3wZax5l1cjcWrrQciulNwRAWZG5iHtMwLjvGiDK0XSOw5d",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getAccount($userID : uuid){\n  accounts(where: {userId: {_eq: $userID}}) {\n    id\n  }\n}\n",
						"variables": "{\n    \"userID\" : \"{{viewer_uuid}}\"\n}"
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "setExternalId",
			"id": "fa52f0cb-8c50-4611-acda-80cb8c32a3f6",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-hasura-admin-secret",
						"value": "ZB3R136ifw7y11yBUX3wZax5l1cjcWrrQciulNwRAWZG5iHtMwLjvGiDK0XSOw5d",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateAccount($accountID : uuid!){\n  updateAccount(_set: {externalId: \"161e063c-f267-4699-ab33-bc6c2f9b8e2f\"}, pk_columns: {id: $accountID}) {\n    id\n  }\n}\n",
						"variables": "{\n    \"accountID\" : \"{{account_id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "authRefreshToken",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "713eac02-1cd9-4a66-b953-9973c30defbd",
						"exec": [
							"var uuid = require('uuid')",
							"var myUUID = uuid.v4()",
							"pm.globals.set(\"refresh_token_uuid\", myUUID);",
							"//pm.collectionVariables.set(\"refresh_token_uuid\", myUUID);",
							"",
							"console.log(pm.globals.get(\"refresh_token_uuid\"));",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "464f42c3-4637-44e2-9e5d-d2a93172bc2c",
						"exec": [
							"pm.test(\"Authenticate Refresh Token Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).not.include(\"errors\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "866636c3-692d-4fab-aeff-11fd93aac4ec",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-hasura-admin-secret",
						"value": "ZB3R136ifw7y11yBUX3wZax5l1cjcWrrQciulNwRAWZG5iHtMwLjvGiDK0XSOw5d",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation InsertAuthRefreshTokens($refresh_token_uuid: uuid, $userID : uuid){\n  insertAuthRefreshTokens(objects: {refreshToken: $refresh_token_uuid, userId: $userID, expiresAt: \"2027-09-26T07:51:44.266Z\"}) {\n    returning {\n      userId\n    }\n  }\n\n}\n",
						"variables": "{\n    \"refresh_token_uuid\" : \"{{refresh_token_uuid}}\",\n    \"userID\" : \"{{viewer_uuid}}\"\n}"
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "setToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8d4ae90d-fcb4-4b84-81f2-4da27db57dd4",
						"exec": [
							"let status = pm.response.code",
							"",
							"if (status == 200) {",
							"    jsonData = pm.response.json();",
							"     if (pm.expect(pm.response.text()).not.include(\"errors\")) {",
							"        let role = jsonData['user']['defaultRole'];",
							"        if (role == \"viewer\"){",
							"            let access_token = jsonData['accessToken'];",
							"            pm.environment.set(\"viewer_token\", access_token);",
							"        } else {",
							"            pm.environment.set(\"viewer_token\", null);",
							"        }",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "fe8ab356-490a-4bf8-80ac-14c809b32c1c",
						"exec": [
							"let uuid = pm.globals.get(\"refresh_token_uuid\");",
							"console.log(uuid)"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "b02da594-c536-4e20-9205-a2fb1b213a3d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-hasura-admin-secret",
						"value": "ZB3R136ifw7y11yBUX3wZax5l1cjcWrrQciulNwRAWZG5iHtMwLjvGiDK0XSOw5d",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"refreshToken\" : \"{{refresh_token_uuid}}\"\n}"
				},
				"url": {
					"raw": "https://auth.zorion.finance/token",
					"protocol": "https",
					"host": [
						"auth",
						"zorion",
						"finance"
					],
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "accountActivity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c3eb8154-e187-4b18-bd57-3b571ef358ff",
						"exec": [
							"pm.test(\"Account Activity Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).include(\"errors\")",
							"        pm.expect(pm.response.text()).not.include('data')",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a6b4a391-b669-4809-9360-2feca0498fe2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AccountActivity($userID : uuid!) {\n  accountActivities(id: $userID) {\n    activityType\n    cumQty\n    date\n    description\n    id\n    leavesQty\n    netAmount\n    orderId\n    orderStatus\n    perShareAmount\n    price\n    qty\n    side\n    status\n    symbol\n    transactionTime\n    type\n  }\n}\n",
						"variables": "{\n    \"userID\" : \"{{account_id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "accountPortfolioHistory",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bb71a866-f91c-473f-aabe-c1053974129f",
						"exec": [
							"pm.test(\"Account Portfolio History Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).include(\"errors\")",
							"        pm.expect(pm.response.text()).not.include('data')",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c822e7bd-5f43-4596-bf32-b893dfca6faa",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AccountPortfolioHistory($userID : uuid!) {\n  accountPortfolioHistory(id: $userID) {\n    baseValue\n    equity\n    profitLoss\n    profitLossPct\n    timeframe\n    timestamp\n  }\n}",
						"variables": "{\n    \"userID\" : \"{{account_id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "accountProfile",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa1db027-8eeb-48f1-a134-72fae1e21863",
						"exec": [
							"pm.test(\"Account Profile Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).include(\"errors\")",
							"        pm.expect(pm.response.text()).not.include('data')",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d5476fca-9431-4944-8f3b-dc0521381e01",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AccountProfile($userID : uuid!) {\n  accountProfile(id: $userID) {\n    cash\n    cashTransferable\n    cashWithdrawable\n    equity\n    lastCash\n    lastDaytradeCount\n    lastDaytradingBuyingPower\n    lastEquity\n    status\n    tradingBlocked\n    transfersBlocked\n  }\n}\n",
						"variables": "{\n    \"userID\" : \"{{account_id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "assetCandles",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c1cdcd94-edef-4097-a4d8-87b390fbf40d",
						"exec": [
							"pm.test(\"Asset Candles Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).not.include(\"errors\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "ea30a6e8-2903-4e1e-be2b-3109c20396a9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AssetCandles {\n  assetCandles(fromTime: 1661176332, id: \"5ebce1ee-a49e-4e98-878b-a773ca8163f5\", resolution: \"D\", toTime: 1661176332) {\n    o\n    s\n    t\n    v\n    c\n    h\n    l\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "assetEsgScore",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b04ddf2d-a1c6-4bc4-a3d0-4425cd76c72a",
						"exec": [
							"pm.test(\"Asset Esg Score Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).not.include(\"errors\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "020015b1-6abe-4211-8455-b641bd5420e0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AssetEsgScore {\n  assetEsgScore(id: \"5ebce1ee-a49e-4e98-878b-a773ca8163f5\") {\n    data\n    environmentScore\n    governanceScore\n    socialScore\n    symbol\n    totalESGScore\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "assetLatestTrade",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "41a6748a-013b-4761-8e0d-51bcb0847c6f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6d3d31e1-c873-472e-9a78-ded0a19ad0d7",
						"exec": [
							"pm.test(\"Asset Latest Trade Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).not.include(\"errors\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f78d8c35-ce2f-45fb-a492-60f75503ad99",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AssetLatestTrade {\n  assetLatestTrade(id: \"5ebce1ee-a49e-4e98-878b-a773ca8163f5\") {\n    price\n    symbol\n    timestamp\n    tradeSize\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "assetMultiSnapshots",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4d307742-1f74-468b-ab92-94203700555c",
						"exec": [
							"pm.test(\"Asset Multi Snapshots Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).not.include(\"errors\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "96c3e78d-e77c-4589-a4f9-5e37249db7b3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AssetMultiSnapshots {\n  assetMultiSnapshots(provider_id: \"3ded05cc-4d10-430f-b312-948f22a847da\", assetsIds: \"bb227ece-ed45-4d50-949a-75f7d5719cad\") {\n    symbol\n    data {\n      dailyBar\n      minuteBar\n      latestQuote\n      latestTrade\n      prevDailyBar\n    }\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "assetProfile",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "101e1276-a796-426c-83f3-9bc414d40039",
						"exec": [
							"pm.test(\"Asset Profile Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).not.include(\"errors\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d4d3954b-31eb-4500-af89-e4fd5abbf65b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AssetProfile {\n  assetProfile(id: \"535683cd-50e1-4dca-9951-5a0a838dae6d\") {\n    address\n    city\n    country\n    currency\n    cusip\n    description\n    employeeTotal\n    exchange\n    finnhubIndustry\n    floatingShare\n    ggroup\n    gind\n    gsector\n    gsubind\n    ipo\n    isin\n    logo\n    marketCapitalization\n    naics\n    naicsNationalIndustry\n    naicsSector\n    naicsSubsector\n    name\n    phone\n    sedol\n    shareOutstanding\n    state\n    ticker\n    usShare\n    weburl\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "assetRecommendationTrends",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fca83506-1ecc-4e24-98f2-68b7110e9650",
						"exec": [
							"pm.test(\"Asset Recommendation Trends Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).not.include(\"errors\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "37718314-9e87-4666-a383-4811a4b1dceb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AssetRecommendationTrends {\n  assetRecommendationTrends(id: \"535683cd-50e1-4dca-9951-5a0a838dae6d\") {\n    buy\n    hold\n    period\n    sell\n    strongBuy\n    strongSell\n    symbol\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "assetShariaCompliance",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "74432589-63d1-413a-8871-6e75f2628bed",
						"exec": [
							"pm.test(\"Asset Sharia Compliance Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).not.include(\"errors\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "7158b727-f146-460f-9897-3b52a833ce6d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AssetShariaCompliance {\n  assetShariaCompliance(id: \"b58d0b1f-2e0e-413d-8ee1-6db299c9db3f\") {\n    data\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "assetTheme",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "96e599bd-d934-4b41-b341-79f203ce21d6",
						"exec": [
							"pm.test(\"Asset Theme Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).not.include(\"errors\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "b411fd1a-b44f-4bdf-9db8-d7bf07f5c271",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query AssetTheme {\n  assetTheme(providerId: \"3ded05cc-4d10-430f-b312-948f22a847da\", theme: \"cloud\") {\n    id\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "insertOrder",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e9cd2021-c89b-40c4-b2c0-b2baad24fbfe",
						"exec": [
							"pm.test(\"Insert Order Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).include(\"errors\")",
							"        pm.expect(pm.response.text()).not.include('data')",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "1c396749-9c52-44ba-956f-deaaec4b5cbd",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation InsertOrder($accountId: uuid = \"\", $amount: numeric = \"\", $assetId: uuid = \"\", $providerId: uuid = \"\", $userId: uuid = \"\") {\n  insertOrder(object: {accountId: $accountId, amount: $amount, assetId: $assetId, orderClass: \"simple\", orderType: \"market\", providerId: $providerId, side: \"buy\", userId: $userId, timeInForce: \"day\"}) {\n    id\n    createdAt\n  }\n}\n\n",
						"variables": "{\n  \"accountId\": \"{{account_id}}\",\n  \"amount\": 0.1,\n  \"assetId\": \"1d0c2875-510c-4d20-be17-052deddb6fe7\",\n  \"providerId\": \"3ded05cc-4d10-430f-b312-948f22a847da\",\n  \"userId\": \"{{users_uuid}}\"\n}"
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "cancelOrder",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fdfe74b5-dd90-414f-af9b-5cab9c1f6051",
						"exec": [
							"pm.test(\"Account Activity Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).include(\"errors\")",
							"        pm.expect(pm.response.text()).not.include('data')",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d4da9c7d-0da5-434e-892f-30e0e205a65d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CancelOrder($id:uuid!){\n    cancelOrder(id: $id)\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "companyNews",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e9fcc492-8ef8-4f01-9134-4e5941e51df8",
						"exec": [
							"pm.test(\"Company News Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).not.include(\"errors\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8bfa9f2a-1cdc-4148-90fd-12b2dd73cfd5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query CompanyNews {\n  companyNews(fromTime: \"1661414903\", id: \"1d0c2875-510c-4d20-be17-052deddb6fe7\", toTime: \"1661414911\") {\n    id\n    category\n    datetime\n    headline\n    image\n    related\n    source\n    summary\n    url\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "getExchangeRate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "173dede8-fcc4-4497-8153-bbfe392c77ea",
						"exec": [
							"pm.test(\"Get Exchange Rate Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).include(\"errors\")",
							"        pm.expect(pm.response.text()).not.include('data')",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "bd2c292f-19da-488f-b198-4bf552d72335",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetExchangeRate {\n  getExchangeRate(accountId: \"f48d9bc6-02b5-49e5-9fcd-e63c9679e0cd\", amount: 1000, fromCurrency: \"USD\", toCurrency: \"GBP\") {\n    rate\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "marketCalendar",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "65956fb4-ef90-4afc-8d88-43c5ef83f931",
						"exec": [
							"pm.test(\"Market Calendar Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).not.include(\"errors\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "7abeec6b-3d50-4b42-8b69-4c9b074b483b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query MarketCalendar {\n  marketCalendar(end: \"2020-06-01\", providerId: \"3ded05cc-4d10-430f-b312-948f22a847da\", start: \"2020-04-10\") {\n    close\n    date\n    open\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "marketNews",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "34e61f1a-2c1d-4d28-8a40-5c0de13c2634",
						"exec": [
							"pm.test(\"Market News Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).not.include(\"errors\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "5dafe7eb-4eae-4a07-86e9-61fa4de0d95f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{viewer_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query MarketNews {\n  marketNews(minId: 10, category: \"general\") {\n    category\n    datetime\n    id\n    image\n    headline\n    url\n    summary\n    source\n    related\n  }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteAuthRefreshToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d12780f1-a388-40d6-8013-77528f10bddf",
						"exec": [
							"pm.test(\"Delete Authenticate Refresh Token Response\", function () {",
							"    let status = pm.response.code",
							"    if (status == 200) {",
							"        pm.expect(pm.response.text()).not.include(\"errors\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "cc9cbfbd-b714-47e4-9b03-84a502850d6b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-hasura-admin-secret",
						"value": "ZB3R136ifw7y11yBUX3wZax5l1cjcWrrQciulNwRAWZG5iHtMwLjvGiDK0XSOw5d",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation DeleteAuthRefreshToken($token_uuid: uuid!) {\n  deleteAuthRefreshToken(refreshToken: $token_uuid) {\n    userId\n  }\n}\n",
						"variables": "{\n    \"token_uuid\" : \"{{refresh_token_uuid}}\"\n}"
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4e66bc2b-00a2-40a1-b943-28602e7d52cd",
						"exec": [
							"let status = pm.response.code",
							"if (status == 200) {",
							"    jsonData = pm.response.json();",
							"    console.log(\"No errors found\")",
							"    let status = jsonData['data']['deleteUser'];",
							"    console.log(status)",
							"    pm.expect(pm.response.text()).not.include(\"null\")",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "1adfbedd-8ebe-4f4d-9491-852a87f21415",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-hasura-admin-secret",
						"value": "ZB3R136ifw7y11yBUX3wZax5l1cjcWrrQciulNwRAWZG5iHtMwLjvGiDK0XSOw5d",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation DeleteUser($userID : uuid!){\n  deleteUser(id: $userID) {\n    id\n  }\n}",
						"variables": "{\n    \"userID\" : \"{{viewer_uuid}}\"\n}"
					}
				},
				"url": {
					"raw": "{{HOST}}/v1/graphql",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"v1",
						"graphql"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{viewer_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4f575ec8-19c3-4b2b-bd25-e81bfb0cf792",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "80ce06af-3371-45cf-8345-17f87673eec1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "600bdbea-3043-4485-9e7e-0d9684a1d385",
			"value": "",
			"disabled": true
		}
	]
}